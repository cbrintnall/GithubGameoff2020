[gd_scene load_steps=5 format=2]

[ext_resource path="res://assets/textures/ui/main_menu_background.png" type="Texture" id=1]
[ext_resource path="res://themes/main.tres" type="Theme" id=2]
[ext_resource path="res://scenes/managers/player_prefs.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasLayer

onready var buttons_tween = get_node(\"Tween\")
onready var play_button = get_node(\"MarginContainer2/VBoxContainer/PlayButton\")
onready var options_button = get_node(\"MarginContainer2/VBoxContainer/OptionsButton\")
onready var quit_button = get_node(\"MarginContainer2/VBoxContainer/QuitButton\")

var _game_scene = preload(\"res://scenes/farm.tscn\")

func _ready():
	_tween_buttons()
	
	var tree = get_tree()
	var prefs_base = get_node(\"PlayerPrefs/PlayerPreferences/MarginContainer\")
	
	play_button.connect(\"button_down\", tree, \"change_scene\", [ \"res://scenes/farm.tscn\" ])
	quit_button.connect(\"button_down\", tree, \"quit\")
	options_button.connect(\"button_down\", prefs_base, \"set_visible\", [ true ])

	#generate_items(\"res://scenes/items/seeds\", \"res://meta/seeds.json\")
	#generate_plants(\"res://scenes/items/plants\", \"res://meta/plants.json\")

	create_seed_resource(\"res://meta/seeds.json\")
	create_plant_resource(\"res://meta/plants.json\")

	get_tree().quit(0)

func handle_commands(args: Array):
	match args:
		[ \"generate\", \"items\", var path, var file_name ]:
			generate_items(path, \"res://meta/seeds.json\")
		[ \"read\", \"items\", var path ]:
			read_items(path)
		[ \"generate\", \"plants\", var path, var file_name ]:
			generate_plants(path, \"res://meta/plants.json\")
			
	get_tree().quit(0)
	
func create_plant_resource(definition_path: String):
	var dir = Directory.new()
	var cache := []
	var definition = File.new()
	definition.open(definition_path, File.READ)
	var data = definition.get_as_text()
	definition.close()
	var parse_result = JSON.parse(data)
	if parse_result.error == OK:
		data = parse_result.result
	else:
		print(\"error parsing plant json\")
		get_tree().quit(1)
	
	var meta = data.get(\"meta\", {})
	var frame_base = meta.get(\"frames_base\", \"res://\")
	var frame_size_base = meta.get(\"frame_size\", {})
	var frame_size = Vector2(
		frame_size_base.get(\"x\", 16),
		frame_size_base.get(\"y\", 16)
	)
	
	for plant in data.get(\"resources\", []):
		var plant_resource = GrowingPlant.new()
		var texture = load(frame_base + plant.get(\"frames_path\"))
		var sprite_frames = SpriteFrames.new()
		var frame_count = texture.get_size().x/frame_size.x

		sprite_frames.add_animation(\"default\")

		for i in range(frame_count):
			var frame_texture = AtlasTexture.new()

			frame_texture.atlas = texture
			frame_texture.region = Rect2(
				Vector2(i * frame_size.x, 0),
				frame_size
			)

			sprite_frames.add_frame(\"default\", frame_texture, frame_count-i)
			sprite_frames.set_animation_loop(\"default\", false)

		plant_resource.grow_frames = sprite_frames
		plant_resource.required_energy = plant.get(\"required_energy\", 100)
		
		var out_name = plant.get(\"name\", \"NO_NAME\")
		var full_output_path = \"{base}/{name}.tres\".format({
			\"base\": meta.get(\"output_folder\", \"res://garbage\"),
			\"name\": out_name
		})
		ResourceSaver.save(full_output_path, plant_resource)

func create_seed_resource(definition_path: String):
	var dir = Directory.new()
	var cache := []
	var definition = File.new()
	definition.open(definition_path, File.READ)
	var data = definition.get_as_text()
	definition.close()
	var parse_result = JSON.parse(data)
	if parse_result.error == OK:
		data = parse_result.result
	else:
		print(\"error parsing seed json\")
		get_tree().quit(1)

	var meta = data.get(\"meta\", {})
	
	for s in data.get(\"resources\", []):
		var seed_item = Item.new()

		seed_item.item_name = s[\"name\"]
		seed_item.value = s.get(\"value\", 0)
		seed_item.plant = load(meta.get(\"plants_folder\", \"res://\") + s.get(\"plant_path\"))
		
		var rect = s.get(\"texture_rect\")
		if rect:
			seed_item.texture = AtlasTexture.new()
			seed_item.texture.atlas = load(s.get(\"texture_path\"))
			seed_item.texture.region = Rect2(
				rect[\"x\"],
				rect[\"y\"],
				rect[\"width\"],
				rect[\"height\"]
			)
		else:
			seed_item.texture = load(s.get(\"texture_path\"))

		var full_output_path = \"{base}/{name}.tres\".format({
			\"base\": meta.get(\"output_folder\", \"res://garbage\"),
			\"name\": seed_item.item_name
		})

		ResourceSaver.save(full_output_path, seed_item)

func read_items(path):
	var file = File.new()
	file.open(path, File.READ)
	print(file.get_as_text())
	file.close()
	
func generate_plants(path, file_name: String):
	var dir = Directory.new()
	var cache := []
	print(\"Will write to \" + file_name)
	if dir.open(path) == OK:
		dir.list_dir_begin()
		var filename = dir.get_next()
		while (filename != \"\"):
			var resource = load(path + \"/\" + filename) as GrowingPlant
			
			if !resource:
				filename = dir.get_next()
				continue
			
			var item := {
				\"frames_path\": resource.grow_frames,
				\"required_energy\": resource.required_energy,
				\"finished_plant_path\": resource.finished_plant.resource_path if resource.finished_plant else \"\"
			}

			cache.append(item)
			filename = dir.get_next()
		var out_file = File.new()
		out_file.open(file_name, File.WRITE)
		out_file.store_string(JSON.print(cache, \"\\t\"))
		out_file.close()
		print(\"Wrote out plants to \" + path)
	else:
		print(\"Couldn't open \" + path)

func generate_items(path, file_name: String):
	var dir = Directory.new()
	var cache := []
	print(\"Will write to \" + file_name)
	if dir.open(path) == OK:
		dir.list_dir_begin()
		var filename = dir.get_next()
		while (filename != \"\"):
			var resource = load(path + \"/\" + filename) as Item
			
			if !resource:
				filename = dir.get_next()
				continue
			
			var item := {
				\"name\": resource.item_name,
				\"value\": resource.value,
				\"plant_path\": resource.resource_path
			}
			
			if resource.texture is AtlasTexture:
				item[\"texture_path\"] = resource.texture.atlas.resource_path
				item[\"texture_rect\"] = {
					\"x\": resource.texture.region.position.x,
					\"y\": resource.texture.region.position.y,
					\"height\": resource.texture.region.size.y,
					\"width\": resource.texture.region.size.x,
				}
			else:
				item[\"texture_path\"] = resource.texture.resource_path

			cache.append(item)
			filename = dir.get_next()
		var out_file = File.new()
		out_file.open(file_name, File.WRITE)
		out_file.store_string(JSON.print(cache, \"\\t\"))
		out_file.close()
		print(\"Wrote out seeds to \" + path)
	else:
		print(\"Couldn't open \" + path)

func _tween_buttons():
	var all_buttons = [
		play_button,
		options_button,
		quit_button
	]

	for button in all_buttons:
		button.rect_position = Vector2(
			button.rect_position.x + button.rect_size.x,
			button.rect_position.y
		)

"

[node name="MainMenu" type="CanvasLayer"]
script = SubResource( 1 )

[node name="MarginContainer" type="MarginContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="MarginContainer"]
margin_right = 1280.0
margin_bottom = 720.0
texture = ExtResource( 1 )
expand = true

[node name="MarginContainer2" type="MarginContainer" parent="."]
anchor_left = 0.776
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -0.280029
custom_constants/margin_right = 12
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer2"]
margin_right = 275.0
margin_bottom = 720.0
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PlayButton" type="Button" parent="MarginContainer2/VBoxContainer"]
margin_top = 326.0
margin_right = 275.0
margin_bottom = 346.0
theme = ExtResource( 2 )
text = "Play"

[node name="OptionsButton" type="Button" parent="MarginContainer2/VBoxContainer"]
margin_top = 350.0
margin_right = 275.0
margin_bottom = 370.0
theme = ExtResource( 2 )
text = "Options"

[node name="QuitButton" type="Button" parent="MarginContainer2/VBoxContainer"]
margin_top = 374.0
margin_right = 275.0
margin_bottom = 394.0
theme = ExtResource( 2 )
text = "Quit"

[node name="Tween" type="Tween" parent="."]

[node name="PlayerPrefs" parent="." instance=ExtResource( 3 )]

[node name="Resume" parent="PlayerPrefs/PlayerPreferences/MarginContainer/CenterContainer/PanelContainer/HBoxContainer/VBoxContainer" index="0"]
margin_top = 0.0

[editable path="PlayerPrefs"]
