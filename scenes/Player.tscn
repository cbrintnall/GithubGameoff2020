[gd_scene load_steps=46 format=2]

[ext_resource path="res://scenes/player/item_quantifier.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/scripts/player.gd" type="Script" id=2]
[ext_resource path="res://assets/textures/player/merchant/idle.png" type="Texture" id=3]
[ext_resource path="res://assets/textures/player/merchant/walk.png" type="Texture" id=4]
[ext_resource path="res://scenes/scripts/inventory_ui.gd" type="Script" id=5]
[ext_resource path="res://scenes/scripts/player_inventory.gd" type="Script" id=6]
[ext_resource path="res://assets/textures/player/reticle.png" type="Texture" id=7]
[ext_resource path="res://assets/audio/sfx/ui/button_hover.wav" type="AudioStream" id=8]
[ext_resource path="res://assets/audio/sfx/ui/selector_revoke.wav" type="AudioStream" id=9]
[ext_resource path="res://assets/textures/player/merchant/hoe.png" type="Texture" id=10]
[ext_resource path="res://assets/textures/player/merchant/pickup.png" type="Texture" id=11]
[ext_resource path="res://assets/audio/sfx/towers/cant_place.wav" type="AudioStream" id=12]
[ext_resource path="res://assets/audio/footsteps.wav" type="AudioStream" id=13]
[ext_resource path="res://assets/textures/player/walk_cloud.png" type="Texture" id=14]
[ext_resource path="res://assets/textures/light.png" type="Texture" id=15]

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 3 )
region = Rect2( 0, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 3 )
region = Rect2( 64, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 3 )
region = Rect2( 128, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 3 )
region = Rect2( 192, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 10 )
region = Rect2( 0, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 10 )
region = Rect2( 64, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 10 )
region = Rect2( 128, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=8]
atlas = ExtResource( 10 )
region = Rect2( 192, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 10 )
region = Rect2( 256, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=10]
atlas = ExtResource( 10 )
region = Rect2( 320, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=12]
atlas = ExtResource( 4 )
region = Rect2( 64, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 4 )
region = Rect2( 128, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=14]
atlas = ExtResource( 4 )
region = Rect2( 192, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 4 )
region = Rect2( 256, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 11 )
region = Rect2( 0, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 11 )
region = Rect2( 64, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 11 )
region = Rect2( 128, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 11 )
region = Rect2( 192, 0, 64, 64 )

[sub_resource type="SpriteFrames" id=20]
animations = [ {
"frames": [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ) ],
"loop": true,
"name": "idle",
"speed": 8.0
}, {
"frames": [ SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ) ],
"loop": true,
"name": "till",
"speed": 12.0
}, {
"frames": [ SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ) ],
"loop": true,
"name": "walking",
"speed": 10.0
}, {
"frames": [ SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ) ],
"loop": true,
"name": "pickup",
"speed": 10.0
} ]

[sub_resource type="CircleShape2D" id=21]
radius = 3.10546

[sub_resource type="GDScript" id=22]
script/source = "
extends Camera2D

var _duration = 0.0
var _period_in_ms = 0.0
var _amplitude = 0.0
var _timer = 0.0
var _last_shook_timer = 0
var _previous_x = 0.0
var _previous_y = 0.0
var _last_offset = Vector2(0, 0)

func _ready():
	set_process(true)


# Shake with decreasing intensity while there's time remaining.
func _process(delta):
	# Only shake when there's shake time remaining.
	if _timer == 0:
		set_offset(Vector2())
		set_process(false)
		return
	# Only shake on certain frames.
	_last_shook_timer = _last_shook_timer + delta
	# Be mathematically correct in the face of lag; usually only happens once.
	while _last_shook_timer >= _period_in_ms:
		_last_shook_timer = _last_shook_timer - _period_in_ms
		# Lerp between [amplitude] and 0.0 intensity based on remaining shake time.
		var intensity = _amplitude * (1 - ((_duration - _timer) / _duration))
		# Noise calculation logic from http://jonny.morrill.me/blog/view/14
		var new_x = rand_range(-1.0, 1.0)
		var x_component = intensity * (_previous_x + (delta * (new_x - _previous_x)))
		var new_y = rand_range(-1.0, 1.0)
		var y_component = intensity * (_previous_y + (delta * (new_y - _previous_y)))
		_previous_x = new_x
		_previous_y = new_y
		# Track how much we've moved the offset, as opposed to other effects.
		var new_offset = Vector2(x_component, y_component)
		set_offset(get_offset() - _last_offset + new_offset)
		_last_offset = new_offset
	# Reset the offset when we're done shaking.
	_timer = _timer - delta
	if _timer <= 0:
		_timer = 0
		set_offset(get_offset() - _last_offset)


# Kick off a new screenshake effect.
func shake(duration, frequency, amplitude):
	# Don't interrupt current shake duration
	if(_timer != 0):
		return
	
	# Initialize variables.
	_duration = duration
	_timer = duration
	_period_in_ms = 1.0 / frequency
	_amplitude = amplitude
	_previous_x = rand_range(-1.0, 1.0)
	_previous_y = rand_range(-1.0, 1.0)
	# Reset previous offset, if any.
	set_offset(get_offset() - _last_offset)
	_last_offset = Vector2(0, 0)
	set_process(true)
"

[sub_resource type="GDScript" id=23]
script/source = "extends Area2D

onready var sprite = get_node(\"AnimatedSprite\")

var can_use := true

func set_can_use():
	sprite.modulate = Color.green
	can_use = true
	
func set_default():
	sprite.modulate = Color.white
	can_use = true
	
func set_cant_use():
	sprite.modulate = Color.red
	can_use = false

"

[sub_resource type="RectangleShape2D" id=24]
extents = Vector2( 7.9, 7.9 )

[sub_resource type="AtlasTexture" id=25]
atlas = ExtResource( 7 )
region = Rect2( 0, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=26]
atlas = ExtResource( 7 )
region = Rect2( 16, 0, 16, 16 )

[sub_resource type="SpriteFrames" id=27]
animations = [ {
"frames": [ SubResource( 25 ), SubResource( 26 ) ],
"loop": true,
"name": "default",
"speed": 4.0
} ]

[sub_resource type="GDScript" id=28]
script/source = "extends CanvasLayer

signal tower_selected(tower)
signal tower_purchase_failed

export(AudioStream) var revoke_selection
export(AudioStream) var choose_selection

onready var audio = get_node(\"AudioStreamPlayer\")
onready var game_manager = get_node(\"/root/GameManager\")
onready var tween := get_node(\"Tween\")
onready var selection_tween := get_node(\"SelectionTween\")
onready var tower_base = get_node(\"MarginContainer/HBoxContainer\")

var input_handler

var _icon_selection_height := 20
var _idx_to_key := {}
var _key_to_idx := {
	KEY_1: 1,
	KEY_2: 2,
	KEY_3: 3,
	KEY_4: 4,
	KEY_5: 5,
	KEY_6: 6,
	KEY_7: 7
}

var _selected_idx := 0
var _instances := {}
var _tower_selector = preload(\"res://scenes/towers/tower_selector.tscn\")
var _selected
var _controller_selection := false

func purchase_done():
	if _selected:
		_revert_height_on_icon(_selected)
		_selected = null

func register_tower(key, tower: PackedScene):
	_idx_to_key[key] = tower
	_set_all_prices()

func _ready():
	input_handler = game_manager.get_player_prefs().get_input_handler()
	input_handler.connect(\"input_mode_changed\", self, \"_on_input_mode_changed\")

	_on_input_mode_changed(input_handler.input_mode)

# todo: if we ever add unlocking towers as we 
func _on_input_mode_changed(mode):
	_controller_selection = mode == Constants.InputMode.CONTROLLER
	
	if _controller_selection:
		for instance in _instances.values():
			instance.show_button_hint(false)
			
		if len(_instances.values()) > 0:
			_instances.values()[_selected_idx].set_controller_selected(false)
			_selected_idx = 0
			_instances.values()[_selected_idx].set_controller_selected(true)
	else:
		for instance in _instances.values():
			instance.show_button_hint(true)
			instance.set_controller_selected(false)

func _revert_height_on_icon(instance):
	var duration = .25
	
	# prevents the selectors from flying off and tweening too far
	if selection_tween.is_active():
		selection_tween.stop_all()
		tower_base.queue_sort()
	
	selection_tween.interpolate_property(
		instance,
		\"rect_position\",
		instance.rect_position,
		instance.rect_position + (Vector2.DOWN * _icon_selection_height),
		duration,
		Tween.TRANS_CUBIC,
		Tween.EASE_OUT
	)
	selection_tween.start()

func _create_new_slot(key, tower: PackedScene):
	pass
	
func _set_all_prices():
	for i in range(0, tower_base.get_child_count()):
		tower_base.get_child(i).queue_free()
	
	var count := 0
	for i in _idx_to_key:
		var instance = _idx_to_key[i].instance()
		var selector = _tower_selector.instance()

		if count == _selected_idx and _controller_selection:
			selector.set_controller_selected(true)

		selector.set_price(instance.value)
		selector.set_key(str(_key_to_idx[i]))
		selector.set_texture(instance.icon_texture)
		selector.show_button_hint(!_controller_selection)
		
		tower_base.add_child(selector)
		
		_instances[_idx_to_key[i]] = selector
		
		# i am lazy
		count += 1

func _unhandled_input(event):
	if _controller_selection:
		if event.is_action_pressed(\"select_next_alt\"):
			_instances.values()[_selected_idx].set_controller_selected(false)
			_selected_idx = int(
				clamp(_selected_idx+1, 0, _idx_to_key.values().size()-1)
			)
			_instances.values()[_selected_idx].set_controller_selected(true)

		if event.is_action_pressed(\"select_previous_alt\"):
			_instances.values()[_selected_idx].set_controller_selected(false)
			_selected_idx = int(
				clamp(_selected_idx-1, 0, _idx_to_key.values().size()-1)
			)
			_instances.values()[_selected_idx].set_controller_selected(true)

		if event.is_action_pressed(\"select_next\"):
			_do_purchase_tower(
				_idx_to_key.values()[_selected_idx]
			)

	if event is InputEventKey:
		if event.pressed and _idx_to_key.has(event.scancode):
			_do_purchase_tower(_idx_to_key[event.scancode])

func _do_purchase_tower(tower: PackedScene):
	if tower.instance().value > game_manager.get_farm_manager().current_lunar_rocks:
		_do_cant_purchase_tween(_instances[tower])
		emit_signal(\"tower_purchase_failed\")
		return
	
	# if we selected something, lower it
	if _selected:
		_revert_height_on_icon(_selected)

	# if what is selected is the same, we wipe out our selection
	if _selected != _instances[tower]:
		_selected = _instances[tower]
		_do_purchasing_tween(_selected)
		audio.pitch_scale = 1.0
		audio.stream = choose_selection
		audio.play()
	else:
		_selected = null
		audio.pitch_scale = .75
		audio.stream = choose_selection
		audio.play()

	# todo: make this emit null, and have the player queue free
	# on their current tower. that way full selection control
	# comes from this node
	emit_signal(\"tower_selected\", tower)

func _do_purchasing_tween(instance):
	var duration = .25

	# prevents the selectors from flying off and tweening too far
	if selection_tween.is_active():
		selection_tween.stop_all()
		tower_base.queue_sort()

	selection_tween.interpolate_property(
		instance,
		\"rect_position\",
		instance.rect_position,
		instance.rect_position + (Vector2.UP * _icon_selection_height),
		duration,
		Tween.TRANS_CUBIC,
		Tween.EASE_OUT
	)
	selection_tween.start()

func _do_cant_purchase_tween(instance):
	if tween.is_active():
		return

	var duration = .125
	var previous_color = instance.modulate
	tween.interpolate_property(
		instance,
		\"rect_scale\",
		Vector2.ONE,
		Vector2.ONE * 1.1,
		duration/2,
		Tween.TRANS_LINEAR,
		Tween.EASE_IN
	)
	tween.interpolate_property(
		instance,
		\"modulate\",
		instance.modulate,
		Color.red,
		duration/2,
		Tween.TRANS_LINEAR,
		Tween.EASE_IN
	)
	tween.start()
	yield(tween,\"tween_all_completed\")
	tween.interpolate_property(
		instance,
		\"rect_scale\",
		instance.rect_scale,
		Vector2.ONE,
		duration/2,
		Tween.TRANS_LINEAR,
		Tween.EASE_IN
	)
	tween.interpolate_property(
		instance,
		\"modulate\",
		Color.red,
		previous_color,
		duration/2,
		Tween.TRANS_LINEAR,
		Tween.EASE_IN
	)
	tween.start()
"

[sub_resource type="Gradient" id=29]
offsets = PoolRealArray( 0.662577, 0.969325 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="Gradient" id=30]
offsets = PoolRealArray( 0.688742, 0.97351 )
colors = PoolColorArray( 0.515625, 0.515625, 0.515625, 0.419608, 0, 0, 0, 0 )

[node name="Player" type="KinematicBody2D"]
position = Vector2( 0, 3 )
collision_layer = 327681
script = ExtResource( 2 )
speed = 1.0
dirt_tilemap_path = NodePath("../../GameManager/DirtBase")
ground_manager = NodePath("../../GameManager/GroundManager")

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
position = Vector2( 0, -0.0196867 )
frames = SubResource( 20 )
animation = "idle"
frame = 1
playing = true
offset = Vector2( 0, -12 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( -1.88504, 2.67874 )
shape = SubResource( 21 )

[node name="Camera2D" type="Camera2D" parent="."]
current = true
zoom = Vector2( 0.2, 0.2 )
script = SubResource( 22 )

[node name="ActionArea" type="Area2D" parent="."]
visible = false
z_index = 2
collision_layer = 524288
collision_mask = 524288
script = SubResource( 23 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="ActionArea"]
visible = false
shape = SubResource( 24 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="ActionArea"]
z_index = -1
frames = SubResource( 27 )
playing = true

[node name="Inventory" type="Node2D" parent="."]
script = ExtResource( 6 )

[node name="CanvasLayer" type="CanvasLayer" parent="Inventory"]

[node name="Control" type="Control" parent="Inventory/CanvasLayer"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
script = ExtResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}
slot_scene = ExtResource( 1 )
player_inventory = NodePath("../..")
slots_parent = NodePath("MarginContainer/VBoxContainer")

[node name="MarginContainer" type="MarginContainer" parent="Inventory/CanvasLayer/Control"]
anchor_top = 0.5
anchor_right = 0.136
anchor_bottom = 1.0
margin_top = -1.0
margin_right = -0.264008
mouse_filter = 2
custom_constants/margin_right = 8
custom_constants/margin_top = 8
custom_constants/margin_left = 8
custom_constants/margin_bottom = 8
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="Inventory/CanvasLayer/Control/MarginContainer"]
margin_left = 8.0
margin_top = 8.0
margin_right = 165.0
margin_bottom = 353.0
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3
alignment = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ToolsUi" type="CanvasLayer" parent="."]
script = SubResource( 28 )
revoke_selection = ExtResource( 9 )
choose_selection = ExtResource( 8 )

[node name="MarginContainer" type="MarginContainer" parent="ToolsUi"]
anchor_left = 0.083
anchor_top = 0.762
anchor_right = 0.934
anchor_bottom = 1.0
margin_left = 0.00799561
margin_top = -0.200012
margin_right = -0.416016
mouse_filter = 1
size_flags_vertical = 0
custom_constants/margin_right = 12
custom_constants/margin_left = 12
custom_constants/margin_bottom = 12
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="ToolsUi/MarginContainer"]
margin_left = 12.0
margin_top = 159.0
margin_right = 1076.0
margin_bottom = 159.0
grow_horizontal = 0
grow_vertical = 0
size_flags_horizontal = 9
size_flags_vertical = 10
custom_constants/separation = 8
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="ToolsUi"]

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="ToolsUi"]
stream = ExtResource( 8 )

[node name="SelectionTween" type="Tween" parent="ToolsUi"]

[node name="footsteps" type="Node2D" parent="."]

[node name="audio" type="AudioStreamPlayer2D" parent="footsteps"]
stream = ExtResource( 13 )

[node name="Timer" type="Timer" parent="footsteps"]
wait_time = 0.4

[node name="Puffs" type="CPUParticles2D" parent="footsteps"]
position = Vector2( -1.5, 2.199 )
z_index = -1
emitting = false
amount = 10
local_coords = false
texture = ExtResource( 14 )
emission_shape = 1
emission_sphere_radius = 2.0
gravity = Vector2( 0, 0 )
initial_velocity = 3.0
initial_velocity_random = 1.0
angular_velocity = 30.0
angular_velocity_random = 1.0
radial_accel = 3.0
angle = 720.0
angle_random = 1.0
scale_amount = 0.1
scale_amount_random = 0.25
color_ramp = SubResource( 29 )

[node name="Steps" type="CPUParticles2D" parent="footsteps"]
position = Vector2( -1.39674, 3.81854 )
z_index = -1
amount = 10
local_coords = false
emission_shape = 3
emission_points = PoolVector2Array( 2, 0, -2, 0 )
emission_colors = PoolColorArray(  )
flag_align_y = true
direction = Vector2( 0, 0 )
gravity = Vector2( 0, 0 )
color_ramp = SubResource( 30 )

[node name="BadAction" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 12 )

[node name="Light2D" type="Light2D" parent="."]
position = Vector2( 18.6875, -7.5 )
texture = ExtResource( 15 )
texture_scale = 0.13
energy = 0.5
